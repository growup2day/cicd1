name: Deploy Changes to Selected VM

on:
  workflow_dispatch:
    inputs:
      target_vm:
        description: "Enter the target VM (vm1 or vm2)"
        required: true
        default: "vm1"

jobs:
  deploy:
    runs-on: [self-hosted, windows]
    
    steps:
      - name: Validate Target VM
        run: |
          $allowedVMs = @("vm1", "vm2")
          if ($allowedVMs -notcontains "${{ inputs.target_vm }}") {
            Write-Error "Invalid VM name. Allowed values: vm1, vm2"
            exit 1
          }
        shell: powershell

      - name: Set Working Directory
        run: |
          Set-Location -Path "D:\bancslink_cicd"
        shell: powershell

      - name: Pull Latest Changes
        run: |
          git pull origin main
        shell: powershell

      - name: Find Differences and Create ZIP
        run: |
          $diffFiles = git diff --name-only HEAD~1
          $zipPath = "D:\bancslink_cicd\latestdiff.zip"
          
          if ($diffFiles) {
              $diffFiles | ForEach-Object {
                  $destPath = "D:\temp_diff\" + $_
                  New-Item -ItemType Directory -Path (Split-Path $destPath) -Force | Out-Null
                  Copy-Item -Path "D:\bancslink_cicd\$_" -Destination $destPath -Force
              }
              Compress-Archive -Path "D:\temp_diff\*" -DestinationPath $zipPath -Force
          } else {
              Write-Output "No changes detected, skipping ZIP creation."
          }
        shell: powershell

      - name: Unzip to Target Location
        run: |
          $unzipPath = "D:\target_location"
          Expand-Archive -Path "D:\bancslink_cicd\latestdiff.zip" -DestinationPath $unzipPath -Force
        shell: powershell

      - name: Force Copy Files to Target Directory
        run: |
          Get-ChildItem -Path "D:\target_location" -Recurse | ForEach-Object {
              $targetFile = $_.FullName.Replace("D:\target_location", "D:\existing_target")
              $targetDir = Split-Path $targetFile -Parent
              if (!(Test-Path $targetDir)) {
                  New-Item -ItemType Directory -Path $targetDir -Force | Out-Null
              }
              Copy-Item -Path $_.FullName -Destination $targetFile -Force
          }
        shell: powershell
